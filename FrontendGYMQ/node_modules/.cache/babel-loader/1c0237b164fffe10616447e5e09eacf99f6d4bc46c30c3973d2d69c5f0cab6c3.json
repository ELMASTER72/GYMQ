{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProyectoSofia\\\\gymfront\\\\src\\\\Layouts\\\\CardComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Cards } from '../Ui/Cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardComponent = () => {\n  _s();\n  const [selectedButton, setSelectedButton] = useState(null);\n  const [showCards, setShowCards] = useState(true);\n  const handleButtonClick = buttonId => {\n    setSelectedButton(buttonId);\n    setShowCards(false);\n  };\n  const renderCards = () => {\n    // Aquí puedes reemplazar \"data\" con tu propio conjunto de datos de tarjetas\n    const data = [{\n      id: 1,\n      buttonId: 'button1',\n      content: /*#__PURE__*/_jsxDEV(Cards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 46\n      }, this)\n    }, {\n      id: 2,\n      buttonId: 'button2',\n      content: 'Contenido de la tarjeta 2'\n    }, {\n      id: 3,\n      buttonId: 'button3',\n      content: 'Contenido de la tarjeta 3'\n    }, {\n      id: 4,\n      buttonId: 'button4',\n      content: 'Contenido de la tarjeta 4'\n    }];\n\n    // Filtra las tarjetas basadas en el botón seleccionado\n    const filteredCards = data.filter(card => card.buttonId === selectedButton);\n    if (!showCards) {\n      return null; // No mostrar las cartas si showCards es false\n    }\n\n    return filteredCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Tarjeta: \", card.content]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonCards\",\n        onClick: () => handleButtonClick('button1'),\n        children: \"Bot\\xF3n 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonCards\",\n        onClick: () => handleButtonClick('button2'),\n        children: \"Bot\\xF3n 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonCards\",\n        onClick: () => handleButtonClick('button3'),\n        children: \"Bot\\xF3n 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonCards\",\n        onClick: () => handleButtonClick('button4'),\n        children: \"Bot\\xF3n 4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this), renderCards()]\n  }, void 0, true);\n};\n_s(CardComponent, \"06txUZz3PyEgxUwAZ7Pc+ZUKYE8=\");\n_c = CardComponent;\nexport default CardComponent;\nvar _c;\n$RefreshReg$(_c, \"CardComponent\");","map":{"version":3,"names":["React","useState","Cards","jsxDEV","_jsxDEV","Fragment","_Fragment","CardComponent","_s","selectedButton","setSelectedButton","showCards","setShowCards","handleButtonClick","buttonId","renderCards","data","id","content","fileName","_jsxFileName","lineNumber","columnNumber","filteredCards","filter","card","map","children","className","onClick","_c","$RefreshReg$"],"sources":["C:/ProyectoSofia/gymfront/src/Layouts/CardComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Cards } from '../Ui/Cards';\r\n\r\nconst CardComponent = () => {\r\n  const [selectedButton, setSelectedButton] = useState(null);\r\n  const [showCards, setShowCards] = useState(true);\r\n\r\n  const handleButtonClick = (buttonId) => {\r\n    setSelectedButton(buttonId);\r\n    setShowCards(false);\r\n  };\r\n\r\n  const renderCards = () => {\r\n    // Aquí puedes reemplazar \"data\" con tu propio conjunto de datos de tarjetas\r\n    const data = [\r\n      { id: 1, buttonId: 'button1', content: <Cards/> },\r\n      { id: 2, buttonId: 'button2', content: 'Contenido de la tarjeta 2' },\r\n      { id: 3, buttonId: 'button3', content: 'Contenido de la tarjeta 3' },\r\n      { id: 4, buttonId: 'button4', content: 'Contenido de la tarjeta 4' },\r\n    ];\r\n\r\n    // Filtra las tarjetas basadas en el botón seleccionado\r\n    const filteredCards = data.filter((card) => card.buttonId === selectedButton);\r\n\r\n    if (!showCards) {\r\n      return null; // No mostrar las cartas si showCards es false\r\n    }\r\n\r\n\r\n    return filteredCards.map((card) => (\r\n      <div key={card.id}>Tarjeta: {card.content}</div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className='buttons'>\r\n      <button className='buttonCards' onClick={() => handleButtonClick('button1')}>Botón 1</button>\r\n      <button className='buttonCards' onClick={() => handleButtonClick('button2')}>Botón 2</button>\r\n      <button className='buttonCards' onClick={() => handleButtonClick('button3')}>Botón 3</button>\r\n      <button className='buttonCards' onClick={() => handleButtonClick('button4')}>Botón 4</button>\r\n    </div>\r\n     {renderCards()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}